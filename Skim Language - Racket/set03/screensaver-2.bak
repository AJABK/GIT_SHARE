;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname sc2) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp")) #f)))
;; Author: Ajay Baban Kauthale
;; Date: 09/27/2015
;; Program for screensaver-1

;(check-location "03" "screensaver-2.rkt")

(require rackunit)
(require "extras.rkt")

(provide
 screensaver
 initial-world
 world-after-tick
 world-after-key-event
 world-rect1
 world-rect2
 new-rectangle
 rect-x
 rect-y
 rect-vx
 rect-vy
 world-after-mouse-event
 rect-after-mouse-event
 rect-selected?
 )

;; Rectangle One/ First Rectangle : is the rectangle present on the canvas with center at (200, 100)
;; Rectangle Two/ Second Rectangle : is the rectangle present on the canvas with center at (200, 200)

;==========================================================================================================================
;                                      CONSTANTS
;==========================================================================================================================
;; constant for displaying canvas
(define MT-SCENE (empty-scene 400 300))
;; constants for rectangle width and height
(define RECT-WIDTH 60)
(define RECT-HEIGHT 50)
;; constants for half of width and height
(define RECT-HALF-WIDTH (/ RECT-WIDTH 2))
(define RECT-HALF-HEIGHT (/ RECT-HEIGHT 2))
;; constant for displaying rectangle
(define RECTANGLE (rectangle 60 50 "outline" "blue"))
;; constant for displaying circle
(define POINT-CIRCLE (circle 5 "outline" "red"))
(define RED-RECTANGLE (rectangle RECT-WIDTH RECT-HEIGHT "outline" "red"))
;; constants for rectangle centers
(define RECT1-CENTER-X 200)
(define RECT1-CENTER-Y 100)
(define RECT2-CENTER-X 200)
(define RECT2-CENTER-Y 200)
;; constants for rectangle velocities
(define RECT1-VX -12)
(define RECT1-VY 20)
(define RECT2-VX 23)
(define RECT2-VY -14)
;; constants for checking if rectangle is crossing the canvas boundries
(define CANVAS-MIN-X 30)
(define CANVAS-MAX-X 370)
(define CANVAS-MIN-Y 25)
(define CANVAS-MAX-Y 275)
;; constants for mouse evevents
(define BUTTON-DOWN "button-down")
(define BUTTON-UP "button-up")
(define DRAG "drag")
(define ENTER "enter")
;; constants for co-ordinate zero
(define ZERO 0)

;==========================================================================================================================
;                                      DATA DEFINITIONS
;==========================================================================================================================
(define-struct Rectangle (x y vx vy selected? dx dy))
;; A Rectangle is a (make-Rectangle Integer Integer Integer Integer Boolean Integer Integer)
;; INTERPRETATION:
;; x and y are the coordinates of the rectangle center
;; vx and vy are the velocities of the rectangle along with x and y axis respectively
;; selected? for showing whether the rectangle is selected or not
;; dx and dy are coordinates of the point where mouse drag event is happening (inside rectangle)

;; TEMPLATE:
;; Rectangle-fn : Rectangle -> ??
#|(define (Rectangle-fn rect)
    ....
    (Rectangle-x rect)
    (Rectangle-y rect)
    (Rectangle-vx rect)
    (Rectangle-vy rect)
    (Rectangle-selected? rect)
    (Rectangle-dx rect)
    (Rectangle-dy rect)
    .....)|#

;; Examples of Rectangle for testing purpose
;; rectangle one
(define rect1 (make-Rectangle RECT1-CENTER-X RECT1-CENTER-Y RECT1-VX RECT1-VY false ZERO ZERO))
;; rectangle two
(define rect2 (make-Rectangle RECT2-CENTER-X RECT2-CENTER-Y RECT2-VX RECT2-VY false ZERO ZERO))
;; rectangle one after tick
(define rect1-after-tick (make-Rectangle (+ RECT1-VX RECT1-CENTER-X ) (+ RECT1-VY RECT1-CENTER-Y) RECT1-VX RECT1-VY false ZERO ZERO))
;; rectangle two after tick
(define rect2-after-tick (make-Rectangle (+ RECT2-VX RECT2-CENTER-X) (+ RECT2-VY RECT2-CENTER-Y) RECT2-VX RECT2-VY false ZERO ZERO))
;; selected rectangles
(define rect1-selected (make-Rectangle RECT1-CENTER-X RECT1-CENTER-Y RECT1-VX RECT1-VY true ZERO ZERO))
(define rect2-selected (make-Rectangle RECT2-CENTER-X RECT2-CENTER-Y RECT2-VX RECT2-VY true ZERO ZERO))
;; rectangle for testing
(define test-rect (make-Rectangle 200 200 -10 10 false ZERO ZERO))
;; rectangle one after crossing the canvas
(define rect1-cross-min-x (make-Rectangle 40 200 -10 10 false ZERO ZERO))
(define rect1-cross-max-x (make-Rectangle 370 200 -10 10 false ZERO ZERO))
(define rect1-cross-min-y (make-Rectangle 200 25 -10 10 false ZERO ZERO))
(define rect1-cross-max-y (make-Rectangle 40 285 -10 10 false ZERO ZERO))
;; rectangle one at the boundry of canvas
(define rect1-at-boundry-min-x (make-Rectangle 30 200 -10 10 false ZERO ZERO))
(define rect1-at-boundry-max-x (make-Rectangle 370 200 -10 10 false ZERO ZERO))
(define rect1-at-boundry-min-y (make-Rectangle 200 25 -10 10 false ZERO ZERO))
(define rect1-at-boundry-max-y (make-Rectangle 40 275 -10 10 false ZERO ZERO))

(define-struct WorldState (rect1 rect2 paused? cx cy))
;; A WorldState is a (make-WorldState Rectangle Rectangle Boolean Integer Integer)
;; INTERPRETATION:
;; rect1 and rect2 are two rectangles present on the screensaver
;; paused? is indicator for whether the screensaver is paused or not
;; showpointer? is indicator for whether to show mouse pointer (circle) on canvas
;; cx and cy are the co-ordinates of the center of the circle

;; TEMPLATE:
;; WorldState-fn : WorldState -> ??
#|(define (WorldState-fn ws)
    ....
    (WorldState-rect1 ws)
    (WorldState-rect2 ws)
    (WorldState-paused? ws)
    (WorldState-cx ws)
    (WorldState-cy ws)
    ....)|#

;; Examples of WorldState for testing purpose
;; initial world state
(define initial-worldState (make-WorldState
                            (make-Rectangle RECT1-CENTER-X RECT1-CENTER-Y RECT1-VX RECT1-VY false ZERO ZERO)
                            (make-Rectangle RECT2-CENTER-X RECT2-CENTER-Y RECT2-VX RECT2-VY false ZERO ZERO)
                            false ZERO ZERO))
;; paused initial world state
(define paused-initial-worldState (make-WorldState
                                   (make-Rectangle RECT1-CENTER-X RECT1-CENTER-Y RECT1-VX RECT1-VY false ZERO ZERO)
                                   (make-Rectangle RECT2-CENTER-X RECT2-CENTER-Y RECT2-VX RECT2-VY false ZERO ZERO)
                                   true ZERO ZERO))
;; world after tick
(define worldState-after-tick (make-WorldState
                               (make-Rectangle (+ RECT1-VX RECT1-CENTER-X ) (+ RECT1-VY RECT1-CENTER-Y) RECT1-VX RECT1-VY false ZERO ZERO)
                               (make-Rectangle (+ RECT2-VX RECT2-CENTER-X) (+ RECT2-VY RECT2-CENTER-Y) RECT2-VX RECT2-VY false ZERO ZERO)
                               false ZERO ZERO))
;; world where rectangles are selected
(define initial-selected-rect-worldState (make-WorldState
                                          (make-Rectangle RECT1-CENTER-X RECT1-CENTER-Y RECT1-VX RECT1-VY true ZERO ZERO)
                                          (make-Rectangle RECT2-CENTER-X RECT2-CENTER-Y RECT2-VX RECT2-VY true ZERO ZERO)
                                          false 10 10))
(define initial-selected-rect1-worldState (make-WorldState
                                           (make-Rectangle RECT1-CENTER-X RECT1-CENTER-Y RECT1-VX RECT1-VY true ZERO ZERO)
                                           (make-Rectangle RECT2-CENTER-X RECT2-CENTER-Y RECT2-VX RECT2-VY false ZERO ZERO)
                                           false 200 100))

;===========================================================================================================================
;                                      FUNCTIONS
;===========================================================================================================================
;; screensaver : PosReal -> WorldState
;; GIVEN: the speed of the simulation, in seconds/tick
;; EFFECT: runs the simulation, starting with the initial state as
;; specified in the problem set.
;; RETURNS: the final state of the world

;; STRATEGY: combine using simpler functions
(define (screensaver v)
  (big-bang (initial-world v)
            (on-tick world-after-tick v)
            (on-key world-after-key-event)
            (on-mouse world-after-mouse-event)
            (to-draw world->scene)))

;;; Helper Functions for Screensaver ;;;;

;; world->scene : WorldState -> Image
;; GIVEN: a WorldState
;; RETURNS: the image depicting the current WorldState with red circle as a pointer if any of the rectangle is selected
;; EXAMPLES:
;; world at initial state:
#| (world->scene initial-selected-rect1-worldState) = (place-image (overlay (get-velocity-string (WorldState-rect1 initial-selected-rect1-worldState))
                                             RECTANGLE) (Rectangle-x (WorldState-rect1 initial-selected-rect1-worldState))
                                             (Rectangle-y (WorldState-rect1 initial-selected-rect1-worldState))
                                             (place-image
                                              (overlay (get-velocity-string (WorldState-rect2 initial-selected-rect1-worldState)) RECTANGLE)
                                              (Rectangle-x (WorldState-rect2 initial-selected-rect1-worldState))
                                              (Rectangle-y (WorldState-rect2 initial-selected-rect1-worldState))
                                              MT-SCENE))|#

;; STRATEGY: combine simpler functions and using template WorldState on ws
(define (world->scene ws)
  (if (showpointer? ws)
      (place-image POINT-CIRCLE (WorldState-cx ws) (WorldState-cy ws)
                   (place-image (get-rect-for-display (WorldState-rect1 ws)) (Rectangle-x (WorldState-rect1 ws)) (Rectangle-y (WorldState-rect1 ws))
                                (place-image (get-rect-for-display (WorldState-rect2 ws)) (Rectangle-x (WorldState-rect2 ws)) (Rectangle-y (WorldState-rect2 ws))
                                             MT-SCENE)))
      (place-image (get-rect-for-display (WorldState-rect1 ws)) (Rectangle-x (WorldState-rect1 ws)) (Rectangle-y (WorldState-rect1 ws))
                   (place-image (get-rect-for-display (WorldState-rect2 ws)) (Rectangle-x (WorldState-rect2 ws)) (Rectangle-y (WorldState-rect2 ws))
                                MT-SCENE))))
;; showpointer? : WorldState -> Boolean
;; GIVEN: a WorldState
;; RETURNS: true iff the mouse button down event have occured inside any of the rectangle
;; EXAMPLES:
;; (showpointer? initial-selected-rect1-worldState) = true
(define (showpointer? ws)
  (or (not (= (WorldState-cx ws) ZERO)) (not (= (WorldState-cy ws) ZERO))))

;; get-rect-for-display : Rectangle -> Image
;; GIVEN: a Rectangle
;; RETURNS: the rectangle with red outline if it is selected
;; EXAMPLES:
;; (get-rect-for-display rect1) = (overlay (get-velocity-string rect1) RECTANGLE)

;; STRATEGY: using template of Rectangle on rect
(define (get-rect-for-display rect)
  (if (rect-selected? rect)
      (overlay (get-velocity-string rect) RED-RECTANGLE) (overlay (get-velocity-string rect) RECTANGLE)))

;; get-velocity-string : Rectangle -> Image
;; GIVEN: a Rectangle
;; RETURNS: the text of velocities in the form of (vx, vy)
;; EXAMPLES:
;; (get-velocity-string rect1) = (text "(-12, 20)" 12 "blue")

;; STRATEGY: using template of Rectangle
(define (get-velocity-string rect)
  (text (string-append "(" (number->string (Rectangle-vx rect)) ", " (number->string (Rectangle-vy rect)) ")") 12 "blue"))

;; TESTS:
(begin-for-test
  ;; test if the initial world is rendered correctly
  (check-equal?
   (world->scene initial-worldState)
   (place-image
    (overlay (get-velocity-string (WorldState-rect1 initial-selected-rect1-worldState)) RECTANGLE) (Rectangle-x (WorldState-rect1 initial-selected-rect1-worldState))
    (Rectangle-y (WorldState-rect1 initial-worldState))
    (place-image
     (overlay (get-velocity-string (WorldState-rect2 initial-selected-rect1-worldState)) RECTANGLE) (Rectangle-x (WorldState-rect2 initial-selected-rect1-worldState))
     (Rectangle-y (WorldState-rect2 initial-selected-rect1-worldState))
     MT-SCENE))))
;=================================================================================================================

;; initial-world : Any -> WorldState
;; GIVEN: any value (ignored)
;; RETURNS: the initial world specified in the problem set
;; EXAMPLES:
;; Get world at initial state
;; (initial-world ZERO) = initial-worldState
(define (initial-world input)
  (make-WorldState (make-Rectangle RECT1-CENTER-X RECT1-CENTER-Y RECT1-VX RECT1-VY false ZERO ZERO)
                   (make-Rectangle RECT2-CENTER-X RECT2-CENTER-Y RECT2-VX RECT2-VY false ZERO ZERO) false ZERO ZERO))

;; TESTS:
(begin-for-test
  ;; test if the  method returns the initial world
  (check-equal? (initial-world ZERO) initial-worldState "initial-world should return the world in initial state"))
;=================================================================================================================

;; world-after-tick : WorldState -> WorldState
;; GIVEN: current worldState
;; RETURNS: the world state that should follow the given world state after a tick
;; EXAMPLES:
;; (world-after-tick initial-worldState) = worldState-after-tick
;; (world-after-tick paused-initial-worldState) = paused-initial-worldState

;; STRATEGY: combine using simpler functions
(define (world-after-tick ws)
  (cond
    [(WorldState-paused? ws) ws]
    [else (change-world ws)]))

;;; Helper Functions for world-after-tick ;;;;

;; change-world :  WorldState -> WorldState
;; GIVEN: current worldState
;; RETURNS: the world state that should follow the given world state and it is not paused
;; EXAMPLES:
;; (change-world initial-worldState) = worldState-after-tick

;; STRATEGY: using template of WorldState on ws
(define (change-world ws)
  (make-WorldState (world-rect1 ws) (world-rect2 ws) (WorldState-paused? ws) ZERO ZERO))

;; TESTS:
(begin-for-test
  ;; test whether initial world is changed after tick
  (check-equal? (world-after-tick initial-worldState) worldState-after-tick "world-after-tick should return new worldstate after tick")
  ;; test whether paused world is remaining same
  (check-equal? (world-after-tick paused-initial-worldState) paused-initial-worldState "world-after-tick should return same worldstate after tick for paused world"))
;=================================================================================================================

;; world-after-key-event : WorldState KeyEvent -> WorldState
;; GIVEN: current worldState
;; RETURNS: the WorldState that should follow the given worldstate after the given keyevent
;; EXAMPLES:
;; (world-after-key-event initial-worldState " ") = paused-initial-worldState
;; (world-after-key-event initial-worldState "a") = worldState-after-tick

;; STRATEGY: combine simpler functions and using cases on key event ke
(define (world-after-key-event ws ke)
  (cond
    [(key=? ke " ")
     (make-WorldState (WorldState-rect1 ws) (WorldState-rect2 ws) (pause-unpause-world ws) ZERO ZERO)]
    [else (world-after-tick ws)]))

;;; Helper Functions for world-after-key-event ;;;;

;; pause-unpause-world : WorldState -> Boolean
;; GIVEN: current worldState
;; RETURNS: true or false which corresponds to pause and unpause the world
;; EXAMPLES:
;; (pause-it initial-worldState) = paused-initial-worldState

;; STRATEGY: using template of WorldState on ws
(define (pause-unpause-world ws)
  (not (WorldState-paused? ws)))

;; TESTS:
(begin-for-test
  ;; test if the world is paused by pressing bar or not
  (check-equal? (world-after-key-event initial-worldState " ") paused-initial-worldState "world-after-key-event should return paused world after space bar event")
  ;; test if the world is not paused for any other event than space bar
  (check-equal? (world-after-key-event initial-worldState "a") worldState-after-tick "world-after-key-event should not do anything for this event"))
;=================================================================================================================

;; world-rect1 : WorldState -> Rectangle
;; GIVEN: current worldState
;; RETURNS: the first rectangle from the WorldState
;; EXAMPLES:
;; (world-rect1 initial-worldState) = rect1-after-tick
;; (world-rect1 initial-selected-rect-worldState) = rect1-selected

;; STRATEGY: use templates of WorldState on ws
(define (world-rect1 ws)
  (if (rect-selected? (WorldState-rect1 ws)) (WorldState-rect1 ws)
      (new-rectangle (rect-x (WorldState-rect1 ws)) (rect-y (WorldState-rect1 ws))
                     (rect-vx (WorldState-rect1 ws)) (rect-vy (WorldState-rect1 ws)))))

;; TESTS:
(begin-for-test
  ;; test if function return the first rectangle after tick or not
  (check-equal? (world-rect1 initial-worldState) rect1-after-tick "world-rect1 should return first rectangle after changing it's coordinates")
  ;; test if function returns same rectangle when it is selected
  (check-equal? (world-rect1 initial-selected-rect-worldState) rect1-selected "world-rect1 should return the same rectangle"))
;=================================================================================================================

;; world-rect2 : WorldState -> Rectangle
;; GIVEN: current worldState
;; RETURNS: the second rectangle from the WorldState
;; EXAMPLES:
;; (world-rect1 initial-worldState) = rect2-after-tick
;; (world-rect1 initial-selected-rect-worldState) = rect2-selected

;; STRATEGY: use template of WorldState on ws
(define (world-rect2 ws)
  (if (rect-selected? (WorldState-rect2 ws)) (WorldState-rect2 ws)
      (new-rectangle (rect-x (WorldState-rect2 ws)) (rect-y (WorldState-rect2 ws))
                     (rect-vx (WorldState-rect2 ws)) (rect-vy (WorldState-rect2 ws)))))

;; TESTS:
(begin-for-test
  ;; test if function return the second rectangle after tick or not
  (check-equal? (world-rect2 initial-worldState) rect2-after-tick "world-rect2 should return second rectangle after changing it's coordinates")
  ;; test if function returns same rectangle when it is selected
  (check-equal? (world-rect2 initial-selected-rect-worldState) rect2-selected "world-rect2 should return the same rectangle"))
;=================================================================================================================

;; new-rectangle : NonNegInt NonNegInt Int Int -> Rectangle
;; GIVEN: 2 non-negative integers x and y, and 2 integers vx and vy
;; RETURNS: a rectangle centered at (x,y), which will travel with velocity (vx, vy)
;; EXAMPLES:
;; (new-rectangle 200 200 -10 10) = TEST-RECT
(define (new-rectangle x y vx vy)
  (make-Rectangle x y vx vy false ZERO ZERO))

;; TESTS:
(begin-for-test
  ;; T=test if rectangle is created with the given x and y coordinates and velocity
  (check-equal? (new-rectangle 200 200 -10 10) test-rect "new-rectangle should return new rectangle with given specs"))
;=================================================================================================================

;; rect-x : Rectangle -> NonNegInt
;; GIVEN: a rectangle
;; RETURNS: the x coordinate of the center of the rectangle by adding velocity vx
;; EXAMPLES:
;; (rect-x rect1) = 188
;; (rect-x rect1-cross-min-x) = CANVAS-MIN-X
;; (rect-x rect1-cross-max-x) = CANVAS-MAX-X

;; STRATEGY: use template of Rectangle on rect
(define (rect-x rect)
  (cond
    [(<= (+ (Rectangle-x rect) (rect-vx rect)) CANVAS-MIN-X) CANVAS-MIN-X]
    [(>= (+ (Rectangle-x rect) (rect-vx rect)) CANVAS-MAX-X) CANVAS-MAX-X]
    [else (+ (Rectangle-x rect) (rect-vx rect))]))

;; TESTS:
(begin-for-test
  ;; test when x coordinate of rectangle is not at the edge of canvas
  (check-equal? (rect-x rect1) 188 "rect-x should return x coordinate after adding vx")
  ;; test when x coordinate of rectangle at the left edge of canvas
  (check-equal? (rect-x rect1-cross-min-x) CANVAS-MIN-X "rect-x should return x coordinate CANVAS-MIN-X")
  ;; test when x coordinate of rectangle at the right edge of the canvas
  (check-equal? (rect-x rect1-cross-max-x) CANVAS-MAX-X "rect-x should return x coordinate CANVAS-MAX-X"))
;=================================================================================================================

;; rect-y : Rectangle -> NonNegInt
;; GIVEN: a rectangle
;; RETURNS: the y coordinate of the center of the rectangle
;; EXAMPLES:
;; (rect-y rect1) = 120
;; (rect-y rect1-cross-min-y) = CANVAS-MIN-Y
;; (rect-y rect1-cross-max-y) = CANVAS-MAX-Y

;; STRATEGY: use template of Rectangle on rect
(define (rect-y rect)
  (cond
    [(<= (+ (Rectangle-y rect) (rect-vy rect)) CANVAS-MIN-Y) CANVAS-MIN-Y]
    [(>= (+ (Rectangle-y rect) (rect-vy rect)) CANVAS-MAX-Y) CANVAS-MAX-Y]
    [else (+ (Rectangle-y rect) (rect-vy rect))]))

;; TESTS:
(begin-for-test
  ;; test when y coordinate of rectangle is not at the edge of canvas
  (check-equal? (rect-y rect1) 120 "rect-x should return y coordinate after adding vy")
  ;; test when y coordinate of rectangle at the top edge of canvas
  (check-equal? (rect-y rect1-cross-min-y) CANVAS-MIN-Y"rect-y should return y coordinate CANVAS-MIN-Y")
  ;; test when y coordinate of rectangle at the bottom edge of canvas
  (check-equal? (rect-y rect1-cross-max-y) CANVAS-MAX-Y"rect-y should return y coordinate CANVAS-MIN-Y"))
;=================================================================================================================

;; rect-vx : Rectangle -> Int
;; GIVEN: a rectangle
;; RETURNS: the velocity of the rectangle in direction x
;; EXAMPLES:
;; (rect-vx RECT1) = -12
;; (rect-vx RECT1-AT-BOUNDRY-MIN-X) = 10
;; (rect-vx RECT1-AT-BOUNDRY-MAX-X) = 10

;; STRATEGY: use template of Rectangle on rect
(define (rect-vx rect)
  (cond
    [(or (<= (Rectangle-x rect) CANVAS-MIN-X) (>= (Rectangle-x rect) CANVAS-MAX-X)) (- ZERO (Rectangle-vx rect))]
    [else (Rectangle-vx rect)]))

;; TESTS:
(begin-for-test
  ;; test when rectangle inside canvas
  (check-equal? (rect-vx rect1) -12 "rect-vx should return the velocity as same")
  ;; test when rectangle at the left edge
  (check-equal? (rect-vx rect1-at-boundry-min-x) 10 "rect-vx should reverse the velocity at left edge")
  ;; test when rectangle at the right
  (check-equal? (rect-vx rect1-at-boundry-max-x) 10 "rect-vx should reverse the velocity at right edge"))
;=================================================================================================================

;; rect-vy : Rectangle -> Int
;; GIVEN: a rectangle
;; RETURNS: the velocity of the rectangle in direction y
;; EXAMPLES:
;; (rect-vy RECT1) = 20
;; (rect-vy RECT1-AT-BOUNDRY-MIN-Y) = -10
;; (rect-vy RECT1-AT-BOUNDRY-MAX-Y) = -10

;; STRATEGY: use template of Rectangle on rect
(define (rect-vy rect)
  (cond
    [(or (<= (Rectangle-y rect) 25) (>= (Rectangle-y rect) 275)) (- ZERO (Rectangle-vy rect))]
    [else (Rectangle-vy rect)]))

;; TESTS:
(begin-for-test
  ;; test when rectangle inside canvas
  (check-equal? (rect-vy rect1) 20 "rect-vy should return the velocity as same")
  ;; test when rectangle at top edge
  (check-equal? (rect-vy rect1-at-boundry-min-y) -10 "rect-vy should reverse the velocity at top edge")
  ;; test when rectangle at bottom edge
  (check-equal? (rect-vy rect1-at-boundry-max-y) -10 "rect-vy should reverse the velocity at bottom edge"))
;=================================================================================================================

;; world-after-mouse-event : WorldState Int Int MouseEvent -> WorldState
;; GIVEN: A WorldState, the x- and y-coordinates of a mouse event, and the mouse event
;; RETURNS: the world that should follow the given world after the given mouse event
;; EXAMPLES:
;; (world-after-mouse-event initial-worldState 200 100 BUTTON-DOWN) =  initial-selected-rect1-worldState
;; (world-after-mouse-event initial-worldState 200 200 BUTTON-UP) =  initial-worldState
;; (world-after-mouse-event initial-worldState 200 200 DRAG) =  initial-selected-rect1-worldState
;; (world-after-mouse-event initial-worldState 200 200 ENTER) =  initial-worldState

;; STRATEGY: cases on mouse events
(define (world-after-mouse-event ws mx my me)
  (cond
    [(mouse=? BUTTON-DOWN me) (world-after-button-down ws mx my me)]
    [(mouse=? BUTTON-UP me)(world-after-button-up ws mx my me)]
    [(mouse=? DRAG me) (world-after-drag ws mx my me)]
    [else ws]))

;;; Helper Functions for world-after-mouse-event ;;;;

;; world-after-drag : WorldState Int Int MouseEvent -> WorldState
;; GIVEN: a WorldState, x and y coordinates of a mouse event and mouse event
;; RETURNS: the WorldState after dragging event
;; EXAMPLES:
;; (world-after-drag initial-worldState 0 0 DRAG) = initial-worldState

;; STRATEGY: using template of WorldState on ws
(define (world-after-drag ws mx my me)
  (if (or (cursor-in-rect? (WorldState-rect1 ws) mx my) (cursor-in-rect? (WorldState-rect2 ws) mx my))
      (make-WorldState (rect-after-mouse-event (WorldState-rect1 ws) mx my me)
                       (rect-after-mouse-event (WorldState-rect2 ws) mx my me)
                       (WorldState-paused? ws) mx my)
      (make-WorldState (unselect-rect (WorldState-rect1 ws)) (unselect-rect (WorldState-rect2 ws))
                       (WorldState-paused? ws) ZERO ZERO)))

;; world-after-button-down : WorldState Int Int MouseEvent -> WorldState
;; GIVEN: a WorldState, x and y coordinates of a mouse event and mouse event
;; RETURNS: the WorldState after mouse button down event
;; EXAMPLES:
;; (world-after-button-down initial-worldState 0 0 BUTTON-DOWN) = initial-worldState 

;; STRATEGY: using template of WorldState on ws
(define (world-after-button-down ws mx my me)
  (if (or (cursor-in-rect? (WorldState-rect1 ws) mx my) (cursor-in-rect? (WorldState-rect2 ws) mx my))
      (make-WorldState (rect-after-mouse-event (WorldState-rect1 ws) mx my me)
                       (rect-after-mouse-event (WorldState-rect2 ws) mx my me)
                       (WorldState-paused? ws) mx my)
      (make-WorldState (unselect-rect (WorldState-rect1 ws)) (unselect-rect (WorldState-rect2 ws))
                       (WorldState-paused? ws) ZERO ZERO))) 

;; world-after-button-up : WorldState Int Int MouseEvent -> WorldState
;; GIVEN: a WorldState, x and y coordinates of a mouse event and mouse event
;; RETURNS: the WorldState after mouse button up event
;; EXAMPLES:
;; (world-after-button-up initial-worldState 0 0 BUTTON-DOWN) = initial-worldState 

;; STRATEGY: using template of WorldState on ws
(define (world-after-button-up ws mx my me)
  (make-WorldState (rect-after-mouse-event (WorldState-rect1 ws) mx my me)
                   (rect-after-mouse-event (WorldState-rect2 ws) mx my me)
                   (WorldState-paused? ws) ZERO ZERO))

;; cursor-in-rect? : Rectangle Int Int -> Boolean
;; GIVEN: a Rectangle, x and y coordinates of a mouse event
;; RETURNS: true iff the rectangle is selected for dragging
;; EXAMPLES:
;; (cursor-in-rect? rect1 200 100) = true

;; STRATEGY: using template of Rectangle on rect
(define (cursor-in-rect? rect mx my)
  (and (<= mx (+ (Rectangle-x rect) RECT-HALF-WIDTH)) (>= mx (- (Rectangle-x rect) RECT-HALF-WIDTH))
       (<= my (+ (Rectangle-y rect) RECT-HALF-HEIGHT)) (>= my (- (Rectangle-y rect) RECT-HALF-HEIGHT))))

;; TESTS
(begin-for-test
  ;; test for button down event
  (check-equal? (world-after-mouse-event initial-worldState 200 100 BUTTON-DOWN) initial-selected-rect1-worldState
                "world-after-mouse-event should return world with rectangle one is selected")
  (check-equal? (world-after-mouse-event initial-worldState ZERO ZERO BUTTON-DOWN) initial-worldState
                "world-after-mouse-event should return the same world after button down event")
  ;; test for button up event
  (check-equal? (world-after-mouse-event initial-worldState 200 200 BUTTON-UP) initial-worldState
                "world-after-mouse-event should return same world after button up event")
  ;; test for drag event
  (check-equal? (world-after-mouse-event initial-worldState 200 100 DRAG) initial-selected-rect1-worldState
                "world-after-mouse-event should return world with rectangle one is selected after drag event")
  (check-equal? (world-after-mouse-event initial-worldState ZERO ZERO DRAG) initial-worldState
                "world-after-mouse-event should return same world after drag on origin of canvas")
  ;; test for no mouse event
  (check-equal? (world-after-mouse-event initial-worldState 200 200 ENTER) initial-worldState
                "world-after-mouse-event should return unchanged world after enter event"))
;=================================================================================================================

;; rect-after-mouse-event :  Rectangle Int Int MouseEvent -> Rectangle
;; GIVEN: A rectangle, the x- and y-coordinates of a mouse event, and the
;; mouse event
;; RETURNS: the rectangle that should follow the given rectangle after
;; the given mouse event
;; EXAMPLES:
;; (rect-after-mouse-event rect1 200 200 ENTER) =  rect1
;; (rect-after-mouse-event rect1 200 100 BUTTON-DOWN) =  rect1-selected
;; (rect-after-mouse-event rect1 200 200 BUTTON-UP) =  rect1
;; (rect-after-mouse-event rect1 200 200 DRAG) =  rect1-selected

;; STRATEGY: cases on mouse event
(define (rect-after-mouse-event rect mx my me)
  (cond
    [(mouse=? me BUTTON-DOWN) (select-rect rect mx my)]
    [(mouse=? me BUTTON-UP) (unselect-rect rect)]
    [(mouse=? me DRAG) (drag-rect rect mx my)]
    [else (unselect-rect rect)]))

;;; Helper Functions for rect-after-mouse-event ;;;;

;; select-rect : Rectangle Int Int -> Rectangle
;; GIVEN: a Rectangle, x and y coordinates of a mouse event
;; RETURNS: the rectangle same as previous one but with selected flag true
;; EXAMPLES:
;; (select-rect rect1 200 100) = rect1-selected

;; STRATEGY: using template of Rectangle on rect
(define (select-rect rect mx my)
  (if (cursor-in-rect? rect mx my)
      (make-Rectangle (Rectangle-x rect) (Rectangle-y rect) (Rectangle-vx rect) (Rectangle-vy rect)
                      true (- (Rectangle-x rect) mx) (- (Rectangle-y rect) my))
      (unselect-rect rect)))

;; unselect-rect : Rectangle -> Rectangle
;; GIVEN: a Rectangle
;; RETURNS: the rectangle same as previous one but with selected flag false
;; EXAMPLES:
;; (select-rect rect1-selected 200 100) = rect1

;; STRATEGY: using template of Rectangle on rect
(define (unselect-rect rect)
  (make-Rectangle (Rectangle-x rect) (Rectangle-y rect) (Rectangle-vx rect) (Rectangle-vy rect) false ZERO ZERO))

;; drag-rect : Rectangle Int Int -> Rectangle
;; GIVEN: a rectangle, x and y coordinate of mouse
;; RETURNS: the rectangle same as previous one, but changed center coordinates
;; EXAMPLES:
;; (drag-rect rect1-selected 200 100) = rect1

;; STRATEGY: using template of Rectangle on rect
(define (drag-rect rect mx my)
  (if (cursor-in-rect? rect mx my)
      (make-Rectangle (+ mx (Rectangle-dx rect)) (+ my (Rectangle-dy rect)) (Rectangle-vx rect)
                      (Rectangle-vy rect) true (Rectangle-dx rect) (Rectangle-dy rect))
      (unselect-rect rect)))

;; TESTS:
(begin-for-test
  (check-equal? (rect-after-mouse-event rect1 200 200 ENTER) rect1 "rect-after-mouse-event should return same rectangle"))
;=================================================================================================================

;; rect-selected? : Rectangle -> Boolean
;; GIVEN: a Rectangle
;; RETURNS: true iff the given rectangle is selected
;; EXAMPLES:
;; (rect-selected? rect1-selected) = true
(define (rect-selected? rect)
  (Rectangle-selected? rect))

;; TESTS:
(begin-for-test
  (check-equal? (rect-selected? rect1-selected) true "rect-selected? should return true for selected rectangle"))