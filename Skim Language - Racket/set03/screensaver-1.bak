;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname screensaver-1) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp")) #f)))
;; Author: Ajay Baban Kauthale
;; Date: 09/27/2015
;; Program for screensaver-1

;(check-location "03" "screensaver-1.rkt")

(require rackunit)
(require "extras.rkt")

(provide
 screensaver
 initial-world
 world-after-tick
 world-after-key-event
 world-rect1
 world-rect2
 world-paused?
 new-rectangle
 rect-x
 rect-y
 rect-vx
 rect-vy
 )

;==========================================================================================
;                                      DATA DEFINITIONS
;==========================================================================================
(define-struct Rectangle (x y vx vy))
;; A Rectangle is a (make-Rectangle Int Int Int Int)
;; INTERPRETATION:
;; x and y are the coordinates of the rectangle center
;; vx and vy are the velocities of the rectangle along with x and y axis respectively
;; Rectangle-fn : Rectangle -> ??
#;(define (Rectangle-fn rect)
    ....
    (Rectangle-x rect)
    (Rectangle-y rect)
    (Rectangle-vx rect)
    (Rectangle-vy rect)
    .....)

(define-struct WorldState (rect1 rect2 paused?))
;; A WorldState is a (make-WorldState Rectangle Rectangle Boolean)
;; INTERPRETATION:
;; rect1 and rect2 are two rectangles present on the screensaver
;; paused? is indicator for whether the screensaver is paused or not
;; WorldState-fn : WorldState -> ??
#;(define (WorldState-fn ws)
    ....
    (WorldState-rect1 ws)
    (WorldState-rect2 ws)
    (WorldState-paused? ws)
    ....)

;==========================================================================================
;                                      CONSTANTS
;==========================================================================================
;; constant for displaying canvas
(define MT-SCENE (empty-scene 400 300))
;; constant for displaying rectangle
(define RECTANGLE (rectangle 60 50 "outline" "blue"))
;; constants for rectangle centers
(define RECT1-CENTER-X 200)
(define RECT1-CENTER-Y 100)
(define RECT2-CENTER-X 200)
(define RECT2-CENTER-Y 200)
;; constants for rectangle velocities
(define RECT1-VX -12)
(define RECT1-VY 20)
(define RECT2-VX 23)
(define RECT2-VY -14)
;; constants for checking if rectangle is crossing the canvas boundries
(define CANVAS-MIN-X 30)
(define CANVAS-MAX-X 370)
(define CANVAS-MIN-Y 25)
(define CANVAS-MAX-Y 275)
;; constants for testing
;; initial world state
(define INITIAL-WORLD (make-WorldState
                       (make-Rectangle
                        RECT1-CENTER-X RECT1-CENTER-Y RECT1-VX RECT1-VY)
                       (make-Rectangle
                        RECT2-CENTER-X RECT2-CENTER-Y RECT2-VX RECT2-VY)
                       false))
;; paused initial world state
(define PAUSED-INITIAL-WORLD (make-WorldState
                              (make-Rectangle
                               RECT1-CENTER-X RECT1-CENTER-Y RECT1-VX RECT1-VY)
                              (make-Rectangle
                               RECT2-CENTER-X RECT2-CENTER-Y RECT2-VX RECT2-VY)
                              true))
;; world after tick
(define WORLD-AFTER-TICK (make-WorldState
                          (make-Rectangle
                           (+ RECT1-VX RECT1-CENTER-X ) (+ RECT1-VY RECT1-CENTER-Y) RECT1-VX RECT1-VY)
                          (make-Rectangle
                           (+ RECT2-VX RECT2-CENTER-X) (+ RECT2-VY RECT2-CENTER-Y) RECT2-VX RECT2-VY)
                          false))
;; rectangle one
(define RECT1 (make-Rectangle RECT1-CENTER-X RECT1-CENTER-Y RECT1-VX RECT1-VY))
;; rectangle two
(define RECT2 (make-Rectangle RECT2-CENTER-X RECT2-CENTER-Y RECT2-VX RECT2-VY))
;; rectangle one after tick
(define RECT1-AFTER-TICK (make-Rectangle (+ RECT1-VX RECT1-CENTER-X ) (+ RECT1-VY RECT1-CENTER-Y) RECT1-VX RECT1-VY))
;; rectangle two after tick
(define RECT2-AFTER-TICK (make-Rectangle (+ RECT2-VX RECT2-CENTER-X) (+ RECT2-VY RECT2-CENTER-Y) RECT2-VX RECT2-VY))
;; rectangle for testing
(define TEST-RECT (make-Rectangle 200 200 -10 10))
(define RECT1-CROSS-MIN-X (make-Rectangle 40 200 -10 10))
(define RECT1-CROSS-MAX-X (make-Rectangle 370 200 -10 10))
(define RECT1-CROSS-MIN-Y (make-Rectangle 200 25 -10 10))
(define RECT1-CROSS-MAX-Y (make-Rectangle 40 285 -10 10))
(define RECT1-AT-BOUNDRY-MIN-X (make-Rectangle 30 200 -10 10))
(define RECT1-AT-BOUNDRY-MAX-X (make-Rectangle 370 200 -10 10))
(define RECT1-AT-BOUNDRY-MIN-Y (make-Rectangle 200 25 -10 10))
(define RECT1-AT-BOUNDRY-MAX-Y (make-Rectangle 40 275 -10 10))

;==========================================================================================
;                                      FUNCTIONS
;==========================================================================================
;; screensaver : PosReal -> WorldState
;; GIVEN: the speed of the simulation, in seconds/tick
;; EFFECT: runs the simulation, starting with the initial state as
;; specified in the problem set.
;; RETURNS: the final state of the world
(define (screensaver v)
  (big-bang (initial-world v)
            (on-tick world-after-tick v)
            (on-key world-after-key-event)
            (to-draw render-world)
            )
  )

;; render-world : WorldState -> Image
;; GIVEN: a WorldState
;; RETURNS: the image depicting the current WorldState
;; EXAMPLES:
;; (render-world INITIAL-WORLD) = (place-image (overlay (get-velocity-string (WorldState-rect1 INITIAL-WORLD)) RECTANGLE)
;;               (Rectangle-x (WorldState-rect1 INITIAL-WORLD))
;;               (Rectangle-y (WorldState-rect1 INITIAL-WORLD))
;;               (place-image
;;               (overlay (get-velocity-string (WorldState-rect2 INITIAL-WORLD)) RECTANGLE)
;;                            (Rectangle-x (WorldState-rect2 INITIAL-WORLD))
;;                            (Rectangle-y (WorldState-rect2 INITIAL-WORLD))
;;                            MT-SCENE))
;; STRATEGY: combine simpler functions and using templates for Rectangle and WorldState
(define (render-world ws)
  (place-image (overlay (get-velocity-string (WorldState-rect1 ws)) RECTANGLE)
               (Rectangle-x (WorldState-rect1 ws))
               (Rectangle-y (WorldState-rect1 ws))
               (place-image
                (overlay (get-velocity-string (WorldState-rect2 ws)) RECTANGLE)
                (Rectangle-x (WorldState-rect2 ws))
                (Rectangle-y (WorldState-rect2 ws))
                MT-SCENE))
  )

;; get-velocity-string : Rectangle -> Image
;; GIVEN: a Rectangle
;; RETURNS: the text of velocities in the form of (vx, vy)
;; EXAMPLES:
;; (get-velocity-string RECT1) = (text "(-12, 20)" 12 "blue")
;; STRATEGY: using template for Rectangle
(define (get-velocity-string rect)
  (text (string-append
         "(" (number->string (Rectangle-vx rect)) ", " (number->string (Rectangle-vy rect)) ")")
        12
        "blue")
  )

;; initial-world : Any -> WorldState
;; GIVEN: any value (ignored)
;; RETURNS: the initial world specified in the problem set
;; EXAMPLES:
;; (initial-world 0) = INITIAL-WORLD
(define (initial-world input)
  (make-WorldState
   (make-Rectangle
    RECT1-CENTER-X RECT1-CENTER-Y RECT1-VX RECT1-VY)
   (make-Rectangle
    RECT2-CENTER-X RECT2-CENTER-Y RECT2-VX RECT2-VY)
   false)
  )

;; world-after-tick : WorldState -> WorldState
;; GIVEN: current worldState
;; RETURNS: the world state that should follow the given world state
;; after a tick.
;; EXAMPLES:
;; (world-after-tick INITIAL-WORLD) = WORLD-AFTER-TICK
;; (world-after-tick PAUSED-INITIAL-WORLD) = PAUSED-INITIAL-WORLD
(define (world-after-tick ws)
  (cond
    [(world-paused? ws)
     ws]
    [else (change-world ws)])
  )

;; change-world :  WorldState -> WorldState
;; GIVEN: current worldState
;; RETURNS: the world state that should follow the given world state and it is not paused
;; EXAMPLES:
;; (change-world INITIAL-WORLD) = WORLD-AFTER-TICK
;; STRATEGY: using template for WorldState
(define (change-world ws)
  (make-WorldState
   (world-rect1 ws)
   (world-rect2 ws)
   (WorldState-paused? ws)
   )
  )

;; world-after-key-event : WorldState KeyEvent -> WorldState
;; GIVEN: current worldState
;; RETURNS: the WorldState that should follow the given worldstate
;; after the given keyevent
;; EXAMPLES:
;; (world-after-key-event INITIAL-WORLD " ") = PAUSED-INITIAL-WORLD
;; (world-after-key-event INITIAL-WORLD "a") = WORLD-AFTER-TICK
;; STRATEGY: combine simpler functions and using template for WorldState
(define (world-after-key-event ws ke)
  (cond
    [(key=? ke " ") (make-WorldState
                     (WorldState-rect1 ws)
                     (WorldState-rect2 ws)
                     (pause-it ws))]
    [else (world-after-tick ws)])
  )

;; pause-it : WorldState -> Boolean
;; GIVEN: current worldState
;; RETURNS: true or false which corresponds to pause and unpause the world
;; EXAMPLES:
;; (pause-it INITIAL-WORLD) = PAUSED-INITIAL-WORLD
(define (pause-it ws)
  (not (world-paused? ws)))

;; world-rect1 : WorldState -> Rectangle
;; GIVEN: current worldState
;; RETURNS: the first rectangle from the WorldState
;; EXAMPLES:
;; (world-rect1 INITIAL-WORLD) = RECT1-AFTER-TICK
;; STRATEGY: use templates of WorldState
(define (world-rect1 ws)
  (new-rectangle
   (rect-x (WorldState-rect1 ws))
   (rect-y (WorldState-rect1 ws))
   (rect-vx (WorldState-rect1 ws))
   (rect-vy (WorldState-rect1 ws)))
  )

;; world-rect2 : WorldState -> Rectangle
;; GIVEN: current worldState
;; RETURNS: the second rectangle from the WorldState
;; EXAMPLES:
;; (world-rect1 INITIAL-WORLD) = RECT2-AFTER-TICK
;; STRATEGY: use templates of WorldState
(define (world-rect2 ws)
  (new-rectangle
   (rect-x (WorldState-rect2 ws))
   (rect-y (WorldState-rect2 ws))
   (rect-vx (WorldState-rect2 ws))
   (rect-vy (WorldState-rect2 ws)))
  )

;; world-paused? : WorldState -> Rectangle
;; GIVEN: current worldState
;; RETURNS: true iff worldsate is paused
;; EXAMPLES:
;; (world-paused? INITIAL-WORLD) = false
;; STRATEGY: use templates of WorldState
(define (world-paused? ws)
  (WorldState-paused? ws)
  )

;; new-rectangle : NonNegInt NonNegInt Int Int -> Rectangle
;; GIVEN: 2 non-negative integers x and y, and 2 integers vx and vy
;; RETURNS: a rectangle centered at (x,y), which will travel with
;; velocity (vx, vy)
;; EXAMPLES:
;; (new-rectangle 200 200 -10 10) = TEST-RECT
(define (new-rectangle x y vx vy)
  (make-Rectangle
   x y vx vy)
  )

;; rect-x : Rectangle -> NonNegInt
;; GIVEN: a rectangle
;; RETURNS: the x coordinate of the center of the rectangle
;; EXAMPLES:
;; (rect-x RECT1) = 188
;; (rect-x RECT1-CROSS-MIN-X) = CANVAS-MIN-X
;; (rect-x RECT1-CROSS-MAX-X) = CANVAS-MAX-X
;; STRATEGY: use templates of Rectangle
(define (rect-x rect)
  (cond
    [(<=
      (+ (Rectangle-x rect) (rect-vx rect)) CANVAS-MIN-X)
     CANVAS-MIN-X]
    [(>=
      (+ (Rectangle-x rect) (rect-vx rect)) CANVAS-MAX-X)
     CANVAS-MAX-X]
    [else (+ (Rectangle-x rect) (rect-vx rect))]
    )
  )

;; rect-y : Rectangle -> NonNegInt
;; GIVEN: a rectangle
;; RETURNS: the y coordinate of the center of the rectangle
;; EXAMPLES:
;; (rect-y RECT1) = 120
;; (rect-y RECT1-CROSS-MIN-Y) = CANVAS-MIN-Y
;; (rect-y RECT1-CROSS-MAX-Y) = CANVAS-MAX-Y
;; STRATEGY: use templates of Rectangle
(define (rect-y rect)
  (cond
    [(<=
      (+ (Rectangle-y rect) (rect-vy rect)) CANVAS-MIN-Y)
     CANVAS-MIN-Y]
    [(>=
      (+ (Rectangle-y rect) (rect-vy rect)) CANVAS-MAX-Y)
     CANVAS-MAX-Y]
    [else (+ (Rectangle-y rect) (rect-vy rect))]
    )
  )

;; rect-vx : Rectangle -> Int
;; GIVEN: a rectangle
;; RETURNS: the velocity of the rectangle in direction x
;; EXAMPLES:
;; (rect-vx RECT1) = -12
;; (rect-vx RECT1-AT-BOUNDRY-MIN-X) = 10
;; (rect-vx RECT1-AT-BOUNDRY-MAX-X) = 10
;; (rect-vx RECT1-AT-BOUNDRY-MAX-X) = 10
;; STRATEGY: use templates of Rectangle
(define (rect-vx rect)
  (cond
    [(or
      (<= (Rectangle-x rect) 30) (>= (Rectangle-x rect) 370))
     (- 0 (Rectangle-vx rect))]
    [else (Rectangle-vx rect)])
  )

;; rect-vy : Rectangle -> Int
;; GIVEN: a rectangle
;; RETURNS: the velocity of the rectangle in direction y
;; EXAMPLES:
;; (rect-vy RECT1) = 20
;; (rect-vy RECT1-AT-BOUNDRY-MIN-Y) = -10
;; (rect-vy RECT1-AT-BOUNDRY-MAX-Y) = -10
;; (rect-vy RECT1-AT-BOUNDRY-MAX-Y) = -10
;; STRATEGY: use templates of Rectangle
(define (rect-vy rect)
  (cond
    [(or
      (<= (Rectangle-y rect) 25) (>= (Rectangle-y rect) 275))
     (- 0 (Rectangle-vy rect))]
    [else (Rectangle-vy rect)])
  )

;; program application
(screensaver 0.5)
;==========================================================================================
;                                      TESTS
;==========================================================================================
(begin-for-test
  ; render-world
  (check-equal?
   (render-world INITIAL-WORLD) (place-image (overlay (get-velocity-string (WorldState-rect1 INITIAL-WORLD)) RECTANGLE)
                                             (Rectangle-x (WorldState-rect1 INITIAL-WORLD))
                                             (Rectangle-y (WorldState-rect1 INITIAL-WORLD))
                                             (place-image
                                              (overlay (get-velocity-string (WorldState-rect2 INITIAL-WORLD)) RECTANGLE)
                                              (Rectangle-x (WorldState-rect2 INITIAL-WORLD))
                                              (Rectangle-y (WorldState-rect2 INITIAL-WORLD))
                                              MT-SCENE)))
  ; get-velocity-string
  (check-equal? (get-velocity-string RECT1) (text "(-12, 20)" 12 "blue"))
  ; initial-world
  (check-equal? (initial-world 0) INITIAL-WORLD)
  ; world-after-tick
  (check-equal? (world-after-tick INITIAL-WORLD) WORLD-AFTER-TICK)
  (check-equal? (world-after-tick PAUSED-INITIAL-WORLD) PAUSED-INITIAL-WORLD)
  ; change-world
  (check-equal? (change-world INITIAL-WORLD) WORLD-AFTER-TICK)
  ; world-after-key-event
  (check-equal? (world-after-key-event INITIAL-WORLD " ") PAUSED-INITIAL-WORLD)
  (check-equal? (world-after-key-event INITIAL-WORLD "a") WORLD-AFTER-TICK)
  ; pause-it
  (check-equal? (pause-it INITIAL-WORLD) true)
  ; world-rect1
  (check-equal? (world-rect1 INITIAL-WORLD) RECT1-AFTER-TICK)
  ; world-rect2
  (check-equal? (world-rect2 INITIAL-WORLD) RECT2-AFTER-TICK)
  ; world-paused?
  (check-equal? (world-paused? INITIAL-WORLD) false)
  ; new-rectangle
  (check-equal? (new-rectangle 200 200 -10 10) TEST-RECT)
  ; rect-x
  (check-equal? (rect-x RECT1) 188)
  (check-equal? (rect-x RECT1-CROSS-MIN-X) CANVAS-MIN-X)
  (check-equal? (rect-x RECT1-CROSS-MAX-X) CANVAS-MAX-X)
  ; rect-y
  (check-equal? (rect-y RECT1) 120)
  (check-equal? (rect-y RECT1-CROSS-MIN-Y) CANVAS-MIN-Y)
  (check-equal? (rect-y RECT1-CROSS-MAX-Y) CANVAS-MAX-Y)
  ; rect-vx
  (check-equal? (rect-vx RECT1) -12)
  (check-equal? (rect-vx RECT1-AT-BOUNDRY-MIN-X) 10)
  (check-equal? (rect-vx RECT1-AT-BOUNDRY-MAX-X) 10)
  (check-equal? (rect-vx RECT1-AT-BOUNDRY-MAX-X) 10)
  ; rect-vy
  (check-equal? (rect-vy RECT1) 20)
  (check-equal? (rect-vy RECT1-AT-BOUNDRY-MIN-Y) -10)
  (check-equal? (rect-vy RECT1-AT-BOUNDRY-MAX-Y) -10)
  (check-equal? (rect-vy RECT1-AT-BOUNDRY-MAX-Y) -10)
  )